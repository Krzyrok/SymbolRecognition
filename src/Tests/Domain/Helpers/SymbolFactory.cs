using System;
using System.Collections.Generic;
using Domain;

namespace Tests.Domain.Helpers
{
    public static class SymbolFactory
    {
        public static BipolarSymbol CreateBipolarFromDigit(int digit)
        {
            return new BipolarSymbol(GetDigitValues(digit));
        }

        private static int[,] GetDigitValues(int digit)
        {
            int[,] digitValues;
            bool digitFound = Digits.TryGetValue(digit, out digitValues);
            if (!digitFound)
            {
                throw new ArgumentException("incorrect digit");
            }

            return digitValues;
        }

        private static readonly Dictionary<int, int[,]> Digits = new Dictionary<int, int[,]>
        {
            { 0, new[,] {
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1, 1, 1, 1, 1, 1,-1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                { 1, 1,-1,-1, 1, 1, 1,-1},
                { 1, 1,-1, 1, 1, 1, 1,-1},
                { 1, 1, 1, 1,-1, 1, 1,-1},
                { 1, 1, 1,-1,-1, 1, 1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                {-1, 1, 1, 1, 1, 1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1}}
            },
            { 1, new[,] {
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1,-1, 1, 1, 1,-1,-1,-1},
                {-1, 1, 1, 1, 1,-1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1, 1, 1, 1, 1, 1, 1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1}}
            },
            { 2, new[,] {
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1, 1, 1, 1, 1, 1,-1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1, 1, 1,-1,-1},
                {-1,-1,-1, 1, 1,-1,-1,-1},
                {-1,-1, 1, 1,-1,-1,-1,-1},
                {-1, 1, 1,-1,-1,-1,-1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                { 1, 1, 1, 1, 1, 1, 1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1}}
            },
            { 3, new[,] {
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1, 1, 1, 1, 1, 1,-1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                {-1,-1, 1, 1, 1, 1,-1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                {-1, 1, 1, 1, 1, 1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1}}
            },
            { 4, new[,] {
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1, 1, 1,-1,-1},
                {-1,-1,-1, 1, 1, 1,-1,-1},
                {-1,-1, 1, 1, 1, 1,-1,-1},
                {-1, 1, 1,-1, 1, 1,-1,-1},
                { 1, 1,-1,-1, 1, 1,-1,-1},
                { 1, 1, 1, 1, 1, 1, 1,-1},
                {-1,-1,-1,-1, 1, 1,-1,-1},
                {-1,-1,-1,-1, 1, 1,-1,-1},
                {-1,-1,-1, 1, 1, 1, 1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1}}
            },
            { 9, new[,] {
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1, 1, 1, 1, 1, 1,-1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                { 1, 1,-1,-1,-1, 1, 1,-1},
                {-1, 1, 1, 1, 1, 1, 1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1,-1, 1, 1,-1},
                {-1,-1,-1,-1, 1, 1,-1,-1},
                {-1, 1, 1, 1, 1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1}}
            }
        };
    }
}